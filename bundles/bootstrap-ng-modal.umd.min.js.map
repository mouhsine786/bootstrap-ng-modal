{"version":3,"sources":["ng://bootstrap-ng-modal/lib/bootstrap-ng-modal.service.ts","ng://bootstrap-ng-modal/lib/bootstrap-ng-modal.component.ts","ng://bootstrap-ng-modal/lib/bootstrap-ng-modal.module.ts"],"names":["BootstrapNgModalService","EventEmitter","prototype","open","options","onCloseEvent","onCancelEvent","_this","this","Object","keys","length","modalId","modalOptions_1","tslib_1","__assign","setTimeout","$","modal","onOpen","emit","cancel","args","close","Injectable","providedIn","Output","BootstrapNgModalComponent","modalService","ngOnInit","self","subscribe","option","component","Component","selector","template","styles","BootstrapNgModalModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"iYAeC,SAAAA,gBAFsC,IAAIC,EAAAA,oBAI1CD,EAAAE,UAAAC,KAAA,SAAKC,EAASC,EAAeC,GAA7B,IAAAC,EAAAC,KACC,GAAIJ,GAAyC,EAA9BK,OAAOC,KAAKN,GAASO,OAAY,CAC/CH,KAAKI,QAAU,IAAMR,EAAQQ,QAE7B,IAAIC,EAAYC,EAAAC,SAAA,GAAQX,UACjBS,EAAaD,QAEpBI,WAAW,WAAM,OAAAC,EAAEV,EAAKK,SAASM,MAAML,IAAe,GACtDL,KAAKW,OAAOC,KAAKhB,GAIjBI,KAAKH,aADFA,GAGiB,KAGpBG,KAAKF,cADFA,GAGkB,MAGvBN,EAAAE,UAAAmB,OAAA,SAAOC,GACNL,EAAET,KAAKI,SAASM,MAAM,QAClBV,KAAKF,eACRE,KAAKF,cAAcgB,IAGrBtB,EAAAE,UAAAqB,MAAA,SAAMD,GACLL,EAAET,KAAKI,SAASM,MAAM,QAClBV,KAAKH,cACRG,KAAKH,aAAaiB,wBA5CpBE,EAAAA,WAAUF,KAAA,CAAC,CACXG,WAAY,iFAQXC,EAAAA,kHCbFC,EAAA,WAYC,SAAAA,EAAoBC,GAAApB,KAAAoB,aAAAA,SAEpBD,EAAAzB,UAAA2B,SAAA,WACC,IAAIC,EAAOtB,KACXA,KAAKoB,aAAaT,OAAOY,UAAU,SAAAC,GAClCF,EAAKG,UAAYD,EAAOC,iCAd1BC,EAAAA,UAASZ,KAAA,CAAC,CACVa,SAAU,qBACVC,SAAU,+DACVC,OAAQ,gDALArC,OADT,GCAAsC,EAAA,oDAICC,EAAAA,SAAQjB,KAAA,CAAC,CACTkB,QAAS,CACRC,EAAAA,cAEDC,aAAc,CAACf,GACfgB,QAAS,CAAChB,SATX","sourcesContent":["import { Injectable, EventEmitter, Output } from '@angular/core';\ndeclare var $: any;\n\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class BootstrapNgModalService {\n\n\tmodalId: string;\n\tonCloseEvent;\n\tonCancelEvent;\n\n\t@Output() onOpen: EventEmitter<any> = new EventEmitter();\n\n\tconstructor() { }\n\n\topen(options, onCloseEvent?, onCancelEvent?) {\n\t\tif (options && Object.keys(options).length > 0) {\n\t\t\tthis.modalId = '#' + options.modalId;\n\n\t\t\tlet modalOptions = { ...options };\n\t\t\tdelete modalOptions.modalId;\n\n\t\t\tsetTimeout(() => $(this.modalId).modal(modalOptions), 0);\n\t\t\tthis.onOpen.emit(options);\n\t\t}\n\n\t\tif (onCloseEvent)\n\t\t\tthis.onCloseEvent = onCloseEvent;\n\t\telse\n\t\t\tthis.onCloseEvent = null;\n\n\t\tif (onCancelEvent)\n\t\t\tthis.onCancelEvent = onCancelEvent;\n\t\telse\n\t\t\tthis.onCancelEvent = null;\n\t}\n\n\tcancel(args?) {\n\t\t$(this.modalId).modal('hide');\n\t\tif (this.onCancelEvent)\n\t\t\tthis.onCancelEvent(args);\n\t}\n\n\tclose(args?) {\n\t\t$(this.modalId).modal('hide');\n\t\tif (this.onCloseEvent)\n\t\t\tthis.onCloseEvent(args);\n\t}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BootstrapNgModalService } from './bootstrap-ng-modal.service';\n\n@Component({\n\tselector: 'bootstrap-ng-modal',\n\ttemplate: `<ng-container *ngComponentOutlet=\"component\"></ng-container>`,\n\tstyles: []\n})\nexport class BootstrapNgModalComponent implements OnInit {\n\n\tcomponent;\n\n\tconstructor(private modalService: BootstrapNgModalService) { }\n\n\tngOnInit() {\n\t\tlet self = this;\n\t\tthis.modalService.onOpen.subscribe(option => {\n\t\t\tself.component = option.component;\n\t\t})\n\t}\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BootstrapNgModalComponent } from './bootstrap-ng-modal.component';\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tdeclarations: [BootstrapNgModalComponent],\n\texports: [BootstrapNgModalComponent]\n})\nexport class BootstrapNgModalModule { }\n"]}